---
- name: Ensure mandatory variables are set
  assert:
    that: "{{ check.that }}"
    fail_msg: "{{ check.msg }}"
    quiet: true
  loop_control:
    loop_var: check
    label: "{{ check.msg }}"
  loop:
    - msg: anarchy variables must be defined, are we running in Anarchy?
      that:
        # Check for anarchy_governor and anarchy_subject, but be careful not to trigger template
        # evaluation. These often will contain variable references that cannot be resolved by
        # anarchy but will later be resolved within the deployer job.
        - vars.anarchy_governor is defined
        - vars.anarchy_subject is defined

    - msg: Variable guid is not defined
      that: >-
        vars.anarchy_subject.vars.job_vars.guid is defined
        and vars.anarchy_subject.vars.job_vars.guid != ''

    - msg: Variable uuid is not defined
      that: >-
        vars.anarchy_subject.vars.job_vars.uuid is defined
        and vars.anarchy_subject.vars.job_vars.uuid != ''

    - msg: Variable aws_sandbox_manager is not defined
      that: aws_sandbox_manager is defined

    - msg: Variable aws_sandbox_manager is incomplete ; missing AWS credentials
      that: >-
        ('pool_manager_aws_access_key_id' in aws_sandbox_manager
        and 'pool_manager_aws_secret_access_key' in aws_sandbox_manager)
        or sandbox_api_login_token | default('') != ''

- when: sandbox_api_login_token | default("") != ""
  block:
    - include_tasks: sandbox_api_login.yaml
    - include_tasks: sandbox_api_release.yaml

# If placement was not found, it's safe to run legacy code to mark to cleanup
# any account which match uuid.
# TODO: remove later
# (when everything is using the sandbox-api and all services have a Placement in DB)
- when: r_del.status | default(404) == 404
  include_tasks: aws_sandbox_cleanup_legacy.yaml
