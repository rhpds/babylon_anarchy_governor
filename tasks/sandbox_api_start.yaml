---
- block:
  - name: Start service using the Sandbox API
    uri:
      headers:
        Authorization: Bearer {{ access_token }}
      url: "{{ sandbox_api_url }}/api/v1/placements/{{ uuid }}/start"
      body_format: json
      method: PUT
      status_code: [200, 202]
    register: r_start
    retries: "{{ sandbox_api_retries }}"
    delay: "{{ sandbox_api_delay }}"
    until: r_start is succeeded or r_start.status == 404

  - name: Set status in anarchy subject
    anarchy_subject_update:
      skip_update_processing: true
      metadata:
        labels:
          state: "starting"
      spec:
        vars:
          current_state: "starting"
      status:
        sandboxAPIJobs:
          start:
            requestID: "{{ r_start.json.request_id }}"
            message: "{{ r_start.json.message }}"
            startTimestamp: "{{ now_time_utc }}"
            httpStatus: "{{ r_start.status }}"

  - name: Wait until async job is completed
    uri:
      headers:
        Authorization: Bearer {{ access_token }}
      url: "{{ sandbox_api_url }}/api/v1/requests/{{ r_start.json.request_id }}/status"
      body_format: json
      status_code: 200
    register: r_request
    retries: "{{ sandbox_api_retries }}"
    delay: "{{ sandbox_api_delay }}"
    failed_when: >-
      r_request is failed
      or r_request.json.status | default('unknown') == 'error'
    until: >-
      r_request is succeeded
      and r_request.json.status in ["success", "error"]

  - when: r_request.json.status == "success"
    block:
    - name: Set state started for {{ anarchy_subject_name }}
      anarchy_subject_update:
        metadata:
          labels:
            state: started
        spec:
          vars:
            current_state: started
        status:
          sandboxAPIJobs:
            start:
              completeTimestamp: "{{ now_time_utc }}"
              jobStatus: successful
              httpStatus: "{{ r_request.status }}"

    - name: Report action successful
      anarchy_finish_action:
        state: successful

  - when: r_request.json.status == "error"
    block:
    - name: Set state started for {{ anarchy_subject_name }}
      anarchy_subject_update:
        metadata:
          labels:
            state: start-error
        spec:
          vars:
            current_state: start-error
        status:
          sandboxAPIJobs:
            start:
              completeTimestamp: "{{ now_time_utc }}"
              jobStatus: error
              httpStatus: "{{ r_request.status }}"

    - name: Report action failure
      anarchy_finish_action:
        state: error

  rescue:
  - name: Set state start-error for {{ anarchy_subject_name }}
    anarchy_subject_update:
      metadata:
        labels:
          state: start-error
      spec:
        vars:
          current_state: start-error
          healthy: false
      status:
        sandboxAPIJobs:
          start:
            completeTimestamp: "{{ now_time_utc }}"
            jobStatus: error
            httpStatus: >-
              {{ r_request.status
              | default(r_start.status)
              }}
            message: >-
              {{ r_request.json.message
              | default(r_request.msg, true)
              | default(r_start.json.message, true)
              | default(r_start.msg, true)
              | default("something bad happened")
              }}

  - name: Report action failure
    anarchy_finish_action:
      state: error
...
