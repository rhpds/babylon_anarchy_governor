---
- name: Ensure request is correct
  vars:
    error_request: >-
       {{ sandbox_api_resources | validate_sandboxes_request }}

  when: error_request != "OK"
  block:
    - fail:
        msg: "{{ error_request }}"
      ignore_errors: true

    - name: Finish action {{ anarchy_action_name }} as failed
      anarchy_finish_action:
        state: failed

    - meta: end_play

- name: Get the cluster console
  k8s_info:
    api_version: v1
    kind: ConfigMap
    namespace: openshift-config-managed
    name: console-public
  register: r_ocp_console_public
  changed_when: false

- name: Set ocp_console_url
  set_fact:
    ocp_console_url: >-
      {{ r_ocp_console_public.resources[0].data.consoleURL | default('') }}

- name: Get a placement, book sandbox(es)
  uri:
    headers:
      Authorization: Bearer {{ access_token }}
    url: "{{ sandbox_api_url }}/api/v1/placements"
    method: POST
    # Acceptable status, don't retry:
    # 200 - OK
    # 400 - Bad Request
    # 401 - Unauthorized
    # 404 - Not Found
    # 409 - Conflict  (placement already exists)
    # 507 - Insufficient Storage  ( not enough sandboxes )
    status_code: [200, 400, 401, 404, 409, 507]
    body_format: json
    body:
      service_uuid: "{{ uuid }}"
      reservation: "{{ sandbox_api_reservation }}"
      annotations:
        guid: "{{ guid }}"
        env_type: "{{ env_type }}"
        owner: "{{ requester_user }}"
        owner_email: "{{ requester_email | default('unknown', True) }}"
        comment: "sandbox-api {{ ocp_console_url }}"
      resources: "{{ sandbox_api_resources | inject_var_annotations }}"
  register: r_new_placement
  retries: "{{ sandbox_api_retries }}"
  delay: "{{ sandbox_api_delay }}"
  until: r_new_placement is succeeded
  changed_when: true

- when: r_new_placement.status not in [200, "200"]
  block:
  - name: Debug placement error
    debug:
      var: r_new_placement

  - name: Finish action {{ anarchy_action_name }} as failed
    include_tasks:
      file: handle-action-{{ anarchy_action_config_name }}-error.yaml

  - meta: end_play

- name: Wait for the resources of the placement to be ready
  uri:
    headers:
      Authorization: Bearer {{ access_token }}
    url: "{{ sandbox_api_url }}/api/v1/placements/{{ uuid }}"
    method: GET

  register: r_placement
  retries: "{{ sandbox_api_retries }}"
  delay: "{{ sandbox_api_delay }}"
  until: r_placement.json.status | default('unknown') in ['success', 'error']
  changed_when: false
  failed_when: false

- name: Finish action {{ anarchy_action_name }} as failed
  # TODO: ensure it's the right way to finish, question for JK
  when: r_placement.json.status == 'error'
  block:
  - name: Debug placement error
    debug:
      var: r_placement

  - name: Finish action {{ anarchy_action_name }} as failed
    include_tasks:
      file: handle-action-{{ anarchy_action_config_name }}-error.yaml

  - meta: end_play

- name: Inject vars into dynamic_job_vars
  set_fact:
    dynamic_job_vars: >-
      {{ vars.dynamic_job_vars
      | default({})
      | combine(r_placement.json | extract_sandboxes_vars, recursive=True) }}

- name: Set sandbox for {{ anarchy_subject_name }}
  anarchy_subject_update:
    skip_update_processing: true
    metadata:
      labels: "{{ r_placement.json | extract_sandboxes_labels }}"
    spec:
      vars:
        job_vars: "{{ r_placement.json | extract_sandboxes_vars(creds=False) }}"
...
