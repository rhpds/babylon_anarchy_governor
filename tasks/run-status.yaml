---
- name: Set startTimestamp to status.actions.status for {{ anarchy_subject_name }}
  anarchy_subject_update:
    skip_update_processing: true
    status:
      actions:
        status:
          startTimestamp: '{{ now_time_utc }}'

- when: not __meta__.deployer.actions.status.disable | default(false)
  block:
  # Get sandbox to get the credential and perform deployer job
  - when: sandbox_api_in_use | bool
    include_tasks: sandbox_get.yaml

  - name: Run deployer status {{ anarchy_subject_name }}
    vars:
      new_check_status_state: running
      job_template_playbook: "{{ deployer_entry_points.status }}"
      job_extra_vars: >-
        {{ vars.anarchy_subject.vars.job_vars | default({})
         | combine(vars.anarchy_governor.vars.job_vars, recursive=True)
         | combine(vars.dynamic_job_vars, recursive=True)
         | ansible.utils.remove_keys(target=['__meta__'])
         | combine(__meta__.deployer.actions.status.extra_vars | default({"ACTION": "status"}))
         | combine({
           callback_url_var: anarchy_action_callback_url,
           callback_token_var: anarchy_action_callback_token,
         }, recursive=True)
        }}
    include_tasks:
      file: check-run-tower-job.yaml

  - name: Schedule check for status of {{ anarchy_subject_name }}
    anarchy_continue_action:
      after: "{{ job_check_interval }}"
...
