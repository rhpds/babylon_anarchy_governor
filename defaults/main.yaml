---
# Variables from Anarchy Subject
guid: "{{ vars.anarchy_subject.vars.job_vars.guid | default(None) }}"

# Variables from Anarchy Subject
uuid: "{{ vars.anarchy_subject.vars.job_vars.uuid | default(None) }}"

# Variables from either Governor or Subject
env_type: >-
  {{ vars.anarchy_governor.vars.job_vars.env_type
  | default(vars.anarchy_subject.vars.job_vars.env_type)
  | default(None) }}

requester_email: >-
  {{ vars.anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-requester-email']
  | default(vars.anarchy_subject.vars.job_vars.requester_email)
  | default(vars.anarchy_subject.vars.job_vars.email)
  | default(None) }}

requester_user: >-
  {{ vars.anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-requester-user']
  | default(vars.anarchy_subject.vars.job_vars.requester_username)
  | default(vars.anarchy_subject.vars.job_vars.student_name)
  | default('babylon', true) }}

delete_on_failure: true

action_provision_data: "{{ anarchy_action_callback_data.data | default({}) }}"
action_provision_message_body: "{{ anarchy_action_callback_data.message_body | default([]) }}"
action_provision_messages: "{{ anarchy_action_callback_data.messages | default([]) }}"

action_retry_count: 0
action_retry_intervals:
- 1m
- 5m
- 10m
- 30m
- 1h
- 2h
- 4h
- 8h
- 16h
- 1d
action_retry_interval: >-
  {{ action_retry_intervals[action_retry_count | int]
    if action_retry_count | int < action_retry_intervals | length
    else action_retry_intervals[-1]
  }}

current_state: unknown
desired_state: unknown
check_status_request_timestamp: ''
last_check_status_request_timestamp: >-
  {{ vars.anarchy_subject_previous_state.spec.vars.check_status_request_timestamp | default('') }}
check_status_state: null

dynamic_job_vars: {}

preserve_job_vars:
- aws_region
- region

# Default check interval for tower job status
job_check_interval: 5m

# AnarchyGovernor controls __meta__ settings.
__meta__: "{{ vars.anarchy_governor.vars.job_vars.__meta__ }}"

# Name of variables to set in job vars for the deployer to callback to Anarchy
# to notify status change, currently just on successful completion.
callback_url_var: >-
  {{ __meta__.deployer.callback_url_var | default("agnosticd_callback_url") }}
callback_token_var: >-
  {{ __meta__.deployer.callback_token_var | default("agnosticd_callback_token") }}

ansible_control_plane: >-
  {{ __meta__.ansible_control_plane.type | default('tower') }}

deployer_type: "{{ __meta__.deployer.type | default('agnosticd') }}"

set_output_dir: "{{ deployer_type == 'agnosticd' }}"

maximum_job_count: >-
  {{ __meta__.tower.maximum_job_count | default(200) }}

organization_name: >-
  {{ __meta__.tower.organization | default('babylon') }}
inventory_name: >-
  {{ organization_name }} {{ __meta__.tower.inventory | default('default') }}
job_template_name: >-
  {{ organization_name }} {{ anarchy_action_name }} {{ vars.anarchy_subject.vars.job_vars.uuid }}
job_template_timeout: >-
  {{ __meta__.tower.timeout | default(10800) }}
job_template_custom_virtualenv: >-
  {%- if ansible_control_plane == 'tower' and
  __meta__.deployer.virtualenv | default('') != '' -%}
    {%- if __meta__.deployer.virtualenv.startswith('/') -%}
      {{ __meta__.deployer.virtualenv }}
    {%- else -%}
      {{ job_template_custom_virtualenv_basedir }}/{{ __meta__.deployer.virtualenv }}
    {%- endif -%}
  {%- endif -%}

job_template_custom_virtualenv_basedir: /opt/rh/virtualenvs

############## Execution Environment #################
# Define execution environment in case automation-controller is selected
execution_environment: >-
  {%- if ansible_control_plane == 'controller' -%}
  {{ __meta__.deployer.execution_environment | default({}) }}
  {%- endif -%}

execution_environment_name: >-
  {%- if execution_environment.name | default('', true) != '' -%}
  {{ execution_environment.name }}
  {%- elif execution_environment.image | default('', true) != '' -%}
  {{ organization_name }} {{ execution_environment.image }}
  {%- endif -%}

# Gather entry points for actions.
# If disable is set for action then default entry point to empty string.
deployer_entry_points:
  destroy: >-
    {{ __meta__.deployer.actions.destroy.disable | default(false) | bool | ternary('',
     __meta__.deployer.actions.destroy.entry_point
     | default(__meta__.deployer.entry_points.destroy)
     | default(__meta__.deployer.entry_point)
     | default('ansible/destroy.yml')
    )}}
  # Note, provision entry point cannot be disabled.
  provision: >-
    {{ __meta__.deployer.actions.provision.entry_point
     | default(__meta__.deployer.entry_points.provision)
     | default(__meta__.deployer.entry_point)
     | default('ansible/main.yml')
    }}
  start: >-
    {{ __meta__.deployer.actions.start.disable | default(false) | bool | ternary('',
     __meta__.deployer.actions.start.entry_point
     | default(__meta__.deployer.entry_points.start)
     | default(__meta__.deployer.entry_point)
     | default('ansible/lifecycle_entry_point.yml')
    )}}
  status: >-
    {{ __meta__.deployer.actions.status.disable | default(false) | bool | ternary('',
     __meta__.deployer.actions.status.entry_point
     | default(__meta__.deployer.entry_points.status)
     | default(__meta__.deployer.entry_point)
     | default('ansible/lifecycle_entry_point.yml')
    )}}
  stop: >-
    {{ __meta__.deployer.actions.stop.disable | default(false) | bool | ternary('',
     __meta__.deployer.actions.stop.entry_point
     | default(__meta__.deployer.entry_points.stop)
     | default(__meta__.deployer.entry_point)
     | default('ansible/lifecycle_entry_point.yml')
    )}}
  update: >-
    {{ __meta__.deployer.actions['update'].disable | default(false) | bool | ternary('',
     __meta__.deployer.actions['update'].entry_point
     | default(__meta__.deployer.entry_points['update'])
     | default(__meta__.deployer.entry_point)
     | default('ansible/update.yml')
    )}}

static_credentials: >-
  {{ __meta__.deployer.credentials | default([]) }}

################################
# Sandbox API
################################
sandbox_api_in_use: >-
  {{
    vars.anarchy_governor.vars.job_vars.__meta__.aws_sandboxed | default(false)
    or
    vars.anarchy_governor.vars.job_vars.__meta__.sandboxes
    | default([])
    | length > 0
  }}

sandbox_api_providers: >-
  TODO   grab all needed providers from:
    vars.anarchy_governor.vars.job_vars.__meta__.sandboxes

# minimum age the sandbox must be before it's selected from the pool
# default is 24h
babylon_aws_sandbox_min_age: "{{ 3600 * 24 }}"

sandbox_api_login_token: "{{ sandbox_api.sandbox_api_login_token }}"

sandbox_api_url: >-
  {{ sandbox_api.sandbox_api_url
  | default('http://sandbox-api.babylon-sandbox-api.svc.cluster.local:8080') }}
sandbox_api_retries: 10
sandbox_api_delay: 30

now_time_utc: "{{ now(utc=true, fmt='%Y-%m-%dT%H:%M:%S') }}"

# Variables from secret via the aws_sandbox_manager variable
dynamodb_pool_table: "{{ aws_sandbox_manager.pool_table | default('accounts') }}"
dynamodb_pool_region: "{{ aws_sandbox_manager.pool_region | default('us-east-1') }}"
pool_manager_aws_access_key_id: "{{ aws_sandbox_manager.pool_manager_aws_access_key_id | default(None) }}"
pool_manager_aws_secret_access_key: "{{ aws_sandbox_manager.pool_manager_aws_secret_access_key | default(None) }}"
pool_manager_vault_password: "{{ aws_sandbox_manager.pool_manager_vault_password | default(None) }}"

# Reservation
sandbox_api_reservation: >-
  {{ vars.anarchy_governor.vars.job_vars.__meta__.sandbox_api.reservation
  | default("") }}

# Control wether the Sandbox API is enough to cleanup everything. By default, it's true.
# It means if the deployer fails in AAP, it'll be ignored and the sandbox API will cleanup everything after and the AnarchySubject will be deleted
# If the Controller job must succeed for a service to be considered delete, turn this to false in agnosticv __meta__.sandbox_api.destroy_catch_all
sandbox_api_destroy_catch_all: >-
  {{ vars.anarchy_governor.vars.job_vars.__meta__.sandbox_api.actions.destroy.catch_all
  | default(true) }}

sandbox_api_resources_default:
- kind: >-
    {{ "AwsSandbox" if sandbox_api_provider == "aws"
       else
       "OcpSanbox" if sandbox_api_provider == "ocp" }}
  count: 1

# Kind of resources to book
sandbox_api_resources: >-
  {{ vars.anarchy_governor.vars.job_vars.__meta__.sandboxes
  | default(sandbox_api_resources_default) }}
