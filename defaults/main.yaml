---
schedule_destroy_after_provision: disabled
schedule_stop_after_provision: disabled
schedule_stop_after_start: disabled
delete_on_failure: true

current_state: unknown
desired_state: unknown
check_status_request_timestamp: ''
last_check_status_request_timestamp: >-
  {{ vars.anarchy_subject_previous_state.spec.vars.check_status_request_timestamp | default('') }}
check_status_state: null

dynamic_job_vars: {}

preserve_job_vars:
- aws_region
- region

# Default check interval for tower job status
tower_job_check_interval: 5m

# AnarchyGovernor controls __meta__ settings.
__meta__: "{{ vars.anarchy_governor.vars.job_vars.__meta__ }}"

# Name of variables to set in job vars for the deployer to callback to Anarchy
# to notify status change, currently just on successful completion.
callback_url_var: >-
  {{ __meta__.deployer.callback_url_var | default("agnosticd_callback_url") }}
callback_token_var: >-
  {{ __meta__.deployer.callback_token_var | default("agnosticd_callback_token") }}

ansible_control_plane: >-
  {{ __meta__.ansible_control_plane.type | default('tower') }}

tower_maximum_job_count: >-
  {{ __meta__.tower.maximum_job_count | default(200) }}

tower_organization_name: >-
  {{ __meta__.tower.organization | default('babylon') }}
tower_inventory_name: >-
  {{ tower_organization_name }} {{ __meta__.tower.inventory | default('default') }}
tower_job_template_name: >-
  {{ tower_organization_name }} {{ anarchy_action_name }} {{ vars.anarchy_subject.vars.job_vars.uuid }}
tower_job_template_timeout: >-
  {{ __meta__.tower.timeout | default(10800) }}
tower_job_template_custom_virtualenv: >-
  {%- if ansible_control_plane == 'tower' and
  __meta__.deployer.virtualenv | default('') != '' -%}
  {{ tower_job_template_custom_virtualenv_basedir }}/{{ __meta__.deployer.virtualenv }}
  {%- endif -%}

tower_job_template_custom_virtualenv_basedir: /opt/rh/virtualenvs

############## Execution Environment #################
# Allowed Execution environments
# Each regex is validated against the corresponding keys of the EE
# name and image keys cannot be defined at the same time in agnosticV.
# name is defined: use the  EE, must exists in Controller
# image is defined: create EE if it doesn't exist. Use the image as the name of the EE.
execution_environment_allow_list:
  - image: ^quay.io/redhat-gpte/agnosticd-images:ee-.*?-v[0-9]+[.][0-9]+[.][0-9]+$
    pull: missing
  - image: ^quay.io/redhat-gpte/agnosticd-images:ee-.*?-(pr-[0-9]+|latest|dev|test)$
    pull: always
  - image: ^registry.redhat.io/ansible-automation-platform-21/ee-
  - image: ^quay.io/redhat-gpte/agnosticd-images:ee-ansible2.9-python3.6-2021-11-30$
  - image: ^quay.io/redhat-gpte/agnosticd-images:ee-equinix_metal-ansible2.9-python3.6-2021-07-02$
  - image: ^quay.io/redhat-gpte/agnosticd-images:ee-equinix_metal-ansible2.9-python3.6-2021-11-03$
  - image: ^quay.io/redhat-gpte/agnosticd-images:ee-azure_open_envs-ansible2.9-python3.6-2022-01-10$
  - image: ^quay.io/redhat-gpte/agnosticd-images:ee-ansible2.9-python3.6-2021-01-22$

  - name: ^Ansible Engine 2.9 execution environment$
  - name: ^Automation Hub Ansible Engine 2.9 execution environment$
  - name: ^Automation Hub Default execution environment$
  - name: ^Automation Hub Minimal execution environment$
  - name: ^Control Plane Execution Environment$
  - name: ^Default execution environment$
  - name: ^Minimal execution environment$

# Define execution environment in case automation-controller is selected
execution_environment: >-
  {%- if ansible_control_plane == 'controller' -%}
  {{ __meta__.deployer.execution_environmnent
  | default(default_execution_environment) }}
  {%- endif -%}

# If not defined, use the same name as previous tower python virtualenv.
default_execution_environment:
  image: quay.io/redhat-gpte/agnosticd-images:ee-{{ __meta__.deployer.virtualenv | default('ansible2.9-python3.6-2021-11-05') }}

deployer_entry_points:
  destroy: >-
    {{ __meta__.deployer.entry_points.destroy
     | default(__meta__.deployer.entry_point)
     | default('ansible/destroy.yml')
    }}
  provision: >-
    {{ __meta__.deployer.entry_points.provision
     | default(__meta__.deployer.entry_point)
     | default('ansible/main.yml')
    }}
  start: >-
    {{ __meta__.deployer.entry_points.start
     | default(__meta__.deployer.entry_point)
     | default('ansible/lifecycle_entry_point.yml')
    }}
  status: >-
    {{ __meta__.deployer.entry_points.status
     | default(__meta__.deployer.entry_point)
     | default('ansible/lifecycle_entry_point.yml')
    }}
  stop: >-
    {{ __meta__.deployer.entry_points.stop
     | default(__meta__.deployer.entry_point)
     | default('ansible/lifecycle_entry_point.yml')
    }}
  update: >-
    {{ __meta__.deployer.entry_points.update
     | default(__meta__.deployer.entry_point)
     | default('ansible/update.yml')
    }}
